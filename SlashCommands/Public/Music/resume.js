const {
   ChatInputCommandInteraction,
   EmbedBuilder,
   SlashCommandBuilder,
} = require('discord.js');

const ErrorHandler = require('../../../Functions/errorHandler');

module.exports = {
   category: 'Music',
   data: new SlashCommandBuilder()
      .setName('resume')
      .setDescription('Ti·∫øp t·ª•c ph√°t nh·∫°c.'),
   /**
    * @param {ChatInputCommandInteraction} interaction
    * @param {Client} client
    */
   async execute(interaction, client) {
      const { options, guild, member, channel } = interaction;

      const VoiceChannel = member.voice.channel;
      if (!VoiceChannel) {
         return ErrorHandler(
            interaction,
            'üö´ | B·∫°n ph·∫£i ·ªü trong m·ªôt ph√≤ng Voice ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y !'
         );
      }

      if (
         guild.members.me.voice.channelId &&
         VoiceChannel.id !== guild.members.me.voice.channelId
      ) {
         return ErrorHandler(
            interaction,
            `üö´ | B·∫°n ph·∫£i ·ªü c√πng m·ªôt ph√≤ng Voice ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y. B√†i h√°t ƒëang ƒë∆∞·ª£c ph√°t t·∫°i ${guild.members.me.voice.channel}`
         );
      }

      const queue = await client.distube.getQueue(VoiceChannel);
      if (queue) {
         try {
            await queue.resume(VoiceChannel);

            console.log(
               `S·ª≠ d·ª•ng th√†nh c√¥ng l·ªánh /resume c·ªßa ${member.user.tag}`
            );
            return interaction.reply({
               embeds: [
                  new EmbedBuilder()
                     .setTitle('‚èØ - ƒê√£ ti·∫øp t·ª•c')
                     .setDescription(
                        `ƒê√£ ti·∫øp t·ª•c ph√°t nh·∫°c. S·ª≠ d·ª•ng \`/pause\` ƒë·ªÉ t·∫°m d·ª´ng ph√°t nh·∫°c.`
                     )
                     .setColor('#2a9454'),
               ],
            });
         } catch (err) {
            console.log(err);
            return ErrorHandler(
               interaction,
               'Kh√¥ng c√≥ b√†i h√°t n√†o ƒë·ªÉ ti·∫øp t·ª•c.'
            );
         }
      } else {
         return ErrorHandler(interaction, 'Kh√¥ng c√≥ b√†i h√°t n√†o ƒë·ªÉ ti·∫øp t·ª•c.');
      }
   },
};
