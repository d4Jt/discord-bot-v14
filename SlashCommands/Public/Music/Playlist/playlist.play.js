const { ChatInputCommandInteraction, EmbedBuilder } = require('discord.js');

const ErrorHandler = require('../../../../Functions/errorHandler');
const Playlist = require('../../../../Schema/Playlist');

module.exports = {
   subCommand: 'playlist.play',
   /**
    * @param {ChatInputCommandInteraction} interaction
    * @param {Client} client
    */
   async autocomplete(interaction, client) {
      let searchSuggestions = [];

      let playlists = await Playlist.find({
         userId: interaction.user.id,
      });

      if (playlists) {
         playlists.forEach(playlist => {
            const User = client.users.cache.get(playlist.userId);

            searchSuggestions.push({
               name: `${playlist.name}<${playlist.id}> c·ªßa ${User.username}\#${User.discriminator}`,
               value: playlist.id,
            });
         });

         await interaction.respond(searchSuggestions);
      }
   },
   async execute(interaction, client) {
      try {
         const { options, guild, user, member, channel } = interaction;
         const VoiceChannel = member.voice.channel;
         if (!VoiceChannel) {
            return ErrorHandler(
               interaction,
               'üö´ | B·∫°n ph·∫£i ·ªü trong m·ªôt ph√≤ng Voice ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y !'
            );
         }

         const queue = await client.distube.getQueue(VoiceChannel);
         if (queue) {
            if (
               guild.members.me.voice.channelId &&
               VoiceChannel.id !== guild.members.me.voice.channelId
            ) {
               return ErrorHandler(
                  interaction,
                  `üö´ | B·∫°n ph·∫£i ·ªü c√πng m·ªôt ph√≤ng Voice ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y. B√†i h√°t ƒëang ƒë∆∞·ª£c ph√°t t·∫°i ${guild.members.me.voice.channel}`
               );
            }
         }

         const queueId = options.getString('playlist-id');

         const data = await Playlist.findOne({ _id: queueId }).catch(() => {
            return ErrorHandler(interaction, 'Danh s√°ch ph√°t kh√¥ng t·ªìn t·∫°i');
         });

         if (data.privacy === true) {
            const User = client.users.cache.get(data.userId);

            if (data.userId !== user.id)
               return ErrorHandler(
                  interaction,
                  `Danh s√°ch n√†y ·ªü ch·∫ø ƒë·ªô private, ch·ªâ c√≥ ${User.tag} m·ªõi s·ª≠ d·ª•ng ƒë∆∞·ª£c.`
               );

            const songs = data.songs.url;
            const names = data.songs.name;

            if (!songs?.length)
               return ErrorHandler(
                  interaction,
                  'Danh s√°ch n√†y tr·ªëng. Vui l√≤ng s·ª≠ d·ª•ng `/playlist add` ƒë·ªÉ th√™m b√†i h√°t.'
               );

            const playlist = await client.distube.createCustomPlaylist(songs, {
               member,
               properties: { name: `${names}` },
               parallel: true,
            });

            await client.distube.play(VoiceChannel, playlist, {
               textChannel: channel,
               member,
            });

            interaction.reply({
               embeds: [
                  new EmbedBuilder()
                     .setColor('#2a9454')
                     .setDescription(
                        `‚úÖ | Danh s√°ch c√≥ ID: **${queueId}** ƒë√£ ƒë∆∞·ª£c ph√°t.`
                     ),
               ],
            });
         } else {
            const songs = data.songs.url;
            const names = data.songs.name.toUpperCase();

            if (songs?.length)
               return ErrorHandler(
                  interaction,
                  'Danh s√°ch n√†y tr·ªëng. Vui l√≤ng s·ª≠ d·ª•ng `/playlist add` ƒë·ªÉ th√™m b√†i h√°t.'
               );

            const playlist = await client.distube.createCustomPlaylist(songs, {
               member,
               properties: { name: `${names}` },
               parallel: true,
            });

            await client.distube.play(VoiceChannel, playlist, {
               textChannel: channel,
               member,
            });

            interaction.reply({
               embeds: [
                  new EmbedBuilder()
                     .setColor('#2a9454')
                     .setDescription(
                        `‚úÖ | Danh s√°ch c√≥ ID: **${queueId}** ƒë√£ ƒë∆∞·ª£c ph√°t.`
                     ),
               ],
            });
         }
      } catch (err) {
         console.log(err);
         return ErrorHandler(
            interaction,
            'Something went wrong, please try again later.'
         );
      }
   },
};
